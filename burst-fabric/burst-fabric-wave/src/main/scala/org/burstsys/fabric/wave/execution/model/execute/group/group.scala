/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.fabric.wave.execution.model.execute

import org.burstsys.fabric.wave.execution.supervisor.group.log
import org.burstsys.vitals.uid.{VitalsUid, newBurstUid}

package object group {

  /**
   * a human friendly name for a 'group' execution
   */
  type FabricGroupName = String

  /**
   * a unique id e for a 'group' execution
   */
  type FabricGroupUid = VitalsUid

  /**
   * UIDs must be at least 16 characters and only alphanumeric, the system adds a uniquing suffix to valid UIDs
   */
  private val validationPattern = "[a-zA-Z]([a-zA-Z0-9_]{15}[a-zA-Z0-9_]*?)(_[a-zA-Z0-9]{6})?".r

  /**
   * Ensure that guids are valid and unique.
   * Guids must be unique because they are used as class names for generated code,
   * if they aren't unique we might use code generated by one query for a different query
   */
  final def sanitizeGuid(groupUid: Option[FabricGroupUid]): FabricGroupUid = {
    groupUid.orElse(Some(newBurstUid)).map {
      case guid@validationPattern(_, suffix) => // the guid matches our specs
        if (suffix == null) {
          val unique = s"${guid}_$guidSuffix"
          log debug s"mapping '$guid' to unique '$unique'"
          unique
        } else guid
      case _ => s"${newBurstUid}_$guidSuffix" // the guid doesn't match our spec
    }.get
  }

  private def guidSuffix: String = newBurstUid.takeRight(6)

  final def sanitizeGuid(groupUid: FabricGroupUid): FabricGroupUid = sanitizeGuid(Option(groupUid))

}
